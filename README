Email Automation Backend - 

This project is a backend system for managing and scheduling automated email campaigns. It is built with Express.js, uses MongoDB for storage, and leverages node-schedule to control when and how emails are sent, following a set of configurable rules.

Core Concepts

The Backend (Express.js)
Handles HTTP requests, routing, scheduling logic, and communication with the database.

Senders (models/sender.js)
Represents the email accounts used to send emails.
Each sender has a daily sending limit.
The system keeps track of how many emails each sender has sent per day.

Campaigns (models/campaign.js)
Represents an email campaign with the following configuration:

Start date and time

Daily sending window (for example, 9 AM to 6 PM)

Delay between each email

Email message content

List of sender IDs to use

Overall daily send limit
Tracks how many emails have been sent each day for the campaign.


Scheduler (node-schedule)
Schedules campaigns based on their start times.
Checks available senders and ensures they haven't exceeded their daily limits.
Triggers email sending within the defined time window and delay intervals.

Mail Delivery System (utils/emailSender.js)
This handles the actual email sending process.
Currently, it's a placeholder that logs output, but it can be configured to use real services like Nodemailer, SendGrid, or Mailgun.

Campaign Routes (routes/campaigns.js)
Handles API endpoints for managing campaigns.
Includes the following operations:

Get all campaigns

Get a specific campaign

Create a new campaign

Update an existing campaign

Delete a campaign
Campaigns are scheduled during creation or update, and all sender limits are respected during email sending.


Database Connector (config/db.js)
Connects the application to a MongoDB database using Mongoose.

Main App File (app.js)
Sets up the server, connects to the database, and loads the routes.

How It Works

1. You send a POST request to /api/campaigns with the campaign configuration: name, date, time window, message, sender list, etc.


2. The server creates the campaign in the database and schedules it based on the provided timing.


3. At the scheduled time, node-schedule checks which senders are available (within their limits) and sends emails one by one, respecting delays.


4. You can manage campaigns using GET, PUT, and DELETE requests.


5. Sender records must be created manually in the database before using their IDs in campaigns.



In summary

This system allows you to define and control when and how your email campaigns are sent.
It keeps track of each senderâ€™s usage, ensures limits are respected, and follows your campaign configuration precisely.
Campaigns will only be triggered if their timing and conditions are correctly defined, and valid sender IDs are provided.

